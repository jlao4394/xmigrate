{"version":3,"sources":["injection.tokens.ts","helpers/log-factory.ts","default.config.ts","services/config/config.service.ts","services/database/database.service.ts","helpers/date.ts","templates/native.ts","templates/es5.ts","templates/es6.ts","templates/typescript.ts","templates/migration.ts","templates/index.ts","helpers/typescript-builder.ts","services/migrations-resolver/migrations-resolver.service.ts","helpers/error.ts","services/migration/migration.service.ts","services/generic-runner/generic-runner.service.ts","helpers/args-extractors.ts","helpers/ensure-folder.ts","helpers/index.ts","migrations.module.ts","app.module.ts","main.ts"],"names":[],"mappings":";AAgDa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAhDb,MAAA,EAAA,QAAA,cAUa,QAAA,aAAe,IAAI,EAAA,eAAe,iBAClC,QAAA,OAAS,IAAI,EAAA,eAAe,qBAqC5B,QAAA,gBAAkB,IAAI,EAAA,eAAe;;ACTrC,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,SAAA,SAAA,EAAA,GAAA,OAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvCb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,uBAEA,EAAA,QAAA,MAEA,MAAa,EAGX,YAAY,EAAqB,GAC1B,KAAA,cAAgB,EAAA,kBAAkB,EAAa,CAClD,MAAO,MAEJ,KAAA,YAAc,EAAA,kBAAkB,EAAW,CAC9C,MAAO,MAGX,IAAI,GACG,KAAA,cAAc,MAAM,KAAK,eAAe,EAAK,OAEpD,MAAM,GACC,KAAA,YAAY,MAAM,KAAK,eAAe,EAAK,OAGlD,QACO,KAAA,cAAc,QACd,KAAA,YAAY,QACZ,KAAA,cAAc,MACd,KAAA,YAAY,MAGnB,eAAe,EAAc,GACpB,WACT,eAAmB,IAAI,qBACrB,KAAK,UAAU,EAAK,KAAM,QA5B9B,QAAA,OAAA,EAkCA,IAAa,EAAb,MAGE,YAA0C,GAAA,KAAA,OAAA,EAF1C,KAAA,QAA+B,IAAI,IAInC,gBACS,OAAA,KAAK,OAAO,OAAQ,KAAK,UAAU,SAG5C,cACS,OAAA,KAAK,OAAO,KAAM,KAAK,UAAU,OAG1C,UAAU,GACD,MAAA,CACL,eAAgB,KAAK,OAAO,UAAU,KAAK,OAAO,GAAM,UACxD,aAAc,KAAK,OAAO,UAAU,KAAK,OAAO,GAAM,SAI1D,mBACG,IAAG,KAAK,QAAQ,UAAU,QAAQ,GAAU,EAAO,SAGtD,OAAO,GAAc,YAAE,EAAF,UAAe,IAC9B,OAAA,KAAK,IAAI,GACJ,KAAK,IAAI,IAEb,KAAA,QAAQ,IAAI,EAAM,IAAI,EAAO,EAAa,IACxC,KAAK,IAAI,IAGlB,IAAI,GACK,OAAA,KAAK,QAAQ,IAAI,GAG1B,IAAI,GACK,OAAA,KAAK,QAAQ,IAAI,KArCf,EAAU,EAAA,CADtB,EAAA,aAIc,EAAA,EAAA,EAAA,OAAO,EAAA,eAA8B,EAAA,oBAAA,CAAY,mBAAZ,OAAY,IAAZ,EAAA,cAAA,EAAA,cAAY,EAAA,UAHnD,GAAA,QAAA,WAAA;;ACrCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAyB,CACpC,wBAAyB,aACzB,cAAe,aACf,gBAAiB,MACjB,YAAY,EACZ,OAAQ,SACR,OAAQ,CACN,OAAQ,mBACR,GAAI,CACF,QAAS,iBACT,MAAO,gBAET,KAAM,CACJ,QAAS,mBACT,MAAO,mBAGX,QAAS,CACP,IAAK,4BACL,aAAc,OACd,QAAS,CACP,iBAAiB;;AClBV,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,MAAA,EAAA,QAAA,cAEA,EAAA,QAAA,wBAGA,IAAa,EAAb,MADA,cAEE,KAAA,OAAiB,EAAA,eAEjB,IAAI,GACF,OAAO,OAAO,KAAK,OAAQ,GAG7B,MACS,OAAA,KAAK,SARH,EAAa,EAAA,CADzB,EAAA,cACY,GAAA,QAAA,cAAA;;ACCA,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,WACA,EAAA,QAAA,YACA,EAAA,QAAA,4BAGA,IAAa,EAAb,MAEE,YAAoB,GAAA,KAAA,cAAA,EADpB,KAAA,YAAwC,IAAI,IAEtC,UAHK,OAAA,EAAA,UAAA,OAAA,EAAA,YAIH,MAAA,EAAM,KAAK,cAAc,OAAO,QAAQ,IACxC,EAAe,KAAK,cAAc,OAAO,QAAQ,aACnD,IAAC,EACG,MAAA,IAAI,MAAM,oCAGd,IAAC,EACG,MAAA,IAAI,MACR,4JAIE,MAAA,QAAe,EAAA,YAAY,QAC/B,EACA,KAAK,cAAc,OAAO,QAAQ,SAE9B,EAAa,EAAO,GAAG,KAAK,GAG3B,OAFP,EAAO,GAAM,CAAA,GAAmB,EAAW,GAAU,IAChD,KAAA,YAAY,IAAI,EAAK,GACnB,IAGH,QA1BK,OAAA,EAAA,UAAA,OAAA,EAAA,kBA2BH,QAAQ,IAAI,IAAI,KAAK,YAAY,UAAU,IAAI,GAAK,EAAE,OAAM,OAGpE,kBACS,OAAA,EAAA,WACF,KAAK,cAAc,OAAO,QAAQ,OACnC,KAAK,cAAc,OAAO,QAAQ,eAEpC,KAAK,cAAc,OAAO,QAAQ,WAnC3B,EAAe,EAAA,CAD3B,EAAA,aAGoC,EAAA,oBAAA,CAAa,mBAAb,OAAa,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,UAFrC,GAAA,QAAA,gBAAA;;ACSA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAfb,MAAA,EAAA,QAAA,YAEa,QAAA,IAAM,EAAC,EAAa,KAAK,SAC9B,MAAA,EAAO,IAAI,KAAK,GACf,OAAA,IAAI,KACT,EAAK,iBACL,EAAK,cACL,EAAK,aACL,EAAK,cACL,EAAK,gBACL,EAAK,gBACL,EAAK,wBAII,QAAA,YAAc,KAAM,EAAA,OAAO,QAAA,MAAO;;ACf/C,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAe;;ACAf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAe;;ACAf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAe;;ACAf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAe;;ACAf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAe;;ACMwB,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANvC,MAAA,EAAA,EAAA,QAAA,aAMmB,QAAA,OANZ,EAAA,QACP,MAAA,EAAA,EAAA,QAAA,UAKc,QAAA,IALP,EAAA,QACP,MAAA,EAAA,EAAA,QAAA,UAIS,QAAA,IAJF,EAAA,QACP,MAAA,EAAA,EAAA,QAAA,iBAG2B,QAAA,WAHpB,EAAA,QACP,MAAA,EAAA,EAAA,QAAA,gBAEuC,QAAA,UAFhC,EAAA;;ACFM,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,MAAA,EAAA,QAAA,iBAEa,QAAA,oBAAsB,EAAC,EAAiB,IAC5C,IAAI,QAAQ,IACX,MAAA,EAAQ,EAAA,MAAM,MAAO,CACzB,OACA,QACA,YACG,EAAM,aACT,WACA,IAGF,EAAM,OAAO,KAAK,QAAQ,QAC1B,EAAM,GAAG,QAAS,IACZ,GAAS,IAAT,EACI,MAAA,IAAI,MAEZ;;ACTO,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IATb,MAAA,EAAA,QAAA,cAEA,EAAA,QAAA,MACA,EAAA,QAAA,QACA,EAAA,QAAA,QACA,EAAA,QAAA,4BACA,EAAA,QAAA,oCAGA,IAAa,EAAb,MACE,YAAoB,GAAA,KAAA,cAAA,EAEd,eAHK,OAAA,EAAA,UAAA,OAAA,EAAA,YAIF,aAAO,EAAA,UAAU,EAAA,QAAV,CACZ,KAAK,cAAc,OAAO,gBACzB,OAAO,GAA0B,QAAlB,EAAA,QAAQ,IAAmB,KAAK,aAAa,MAG3D,mBATK,OAAA,EAAA,UAAA,OAAA,EAAA,YAUF,aAAO,EAAA,UAAU,EAAA,QAAV,CACZ,KAAK,cAAc,OAAO,QAAU,SAEnC,OAAO,GAA0B,QAAlB,EAAA,QAAQ,IACvB,IAAI,GAAK,KAAK,sBAAsB,MAGzC,aAAa,GACJ,MAAkB,QAAlB,EAAA,QAAQ,IAAmB,KAAK,cAAc,OAAO,WAGxD,cACJ,EACA,GAvBS,OAAA,EAAA,UAAA,OAAA,EAAA,YAyBL,IAAA,EAMG,OAJL,EADE,KAAK,aAAa,SACF,KAAK,gBAAgB,GAE3B,QAAQ,MAAR,CAAe,OAAf,CAAuB,KAAK,YAAY,MAKxD,YAAY,GACH,OAAA,EAAA,KACL,QAAQ,MACR,KAAK,cAAc,OAAO,cAC1B,GAIJ,gBAAgB,GACP,OAAA,KAAK,YAAY,GAAU,QAAQ,QAAQ,MAAO,IAGrD,MAAM,EAAuB,IA9CxB,OAAA,EAAA,UAAA,OAAA,EAAA,YAqDF,OANF,EAAW,SACd,QAAmB,KAAK,sBAEpB,QAAQ,IACZ,EAAW,IAAI,GAAY,KAAK,gBAAgB,MAE3C,IAGH,gBAAgB,GAxDX,OAAA,EAAA,UAAA,OAAA,EAAA,kBAyDH,KAAK,OAAO,KAAK,sBAAsB,UACvC,KAAK,OAAO,KAAK,yBAAyB,YAG5C,OAAO,GA7DF,OAAA,EAAA,UAAA,OAAA,EAAA,YA8DF,OAAA,IAAI,QAAQ,GAAW,EAAA,OAAO,EAAM,IAAM,GAAQ,OAGrD,gBAAgB,GAjEX,OAAA,EAAA,UAAA,OAAA,EAAA,YAkEF,OAAA,QAAQ,KAAK,sBAAsB,MAGtC,oBAAoB,GArEf,OAAA,EAAA,UAAA,OAAA,EAAA,kBAsEH,EAAA,oBACJ,EAAW,IAAI,GAAY,KAAK,gBAAgB,IAChD,KAAK,cAAc,OAAO,UAI9B,sBAAsB,GACb,OAAA,EAAA,KAAK,QAAQ,MAAO,KAAK,cAAc,OAAO,OAAQ,KAAK,wBAChE,IAIJ,wBAAwB,GACf,OAAA,EAAS,QAAQ,KAAM,MAG1B,UAtFK,OAAA,EAAA,UAAA,OAAA,EAAA,YAuFL,OAAA,EAAA,WAAW,KAAK,cAAc,OAAO,eAChC,KAAK,cAAc,OAAO,cAE5B,EAAA,KAAK,QAAQ,MAAO,KAAK,cAAc,OAAO,mBA1F5C,EAAkB,EAAA,CAD9B,EAAA,aAEoC,EAAA,oBAAA,CAAa,mBAAb,OAAa,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,UADrC,GAAA,QAAA,mBAAA;;ACPb,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,MAAa,UAAiB,OAA9B,QAAA,SAAA;;ACca,aAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAhBb,MAAA,EAAA,QAAA,gCACA,EAAA,QAAA,cAEA,EAAA,QAAA,QACA,EAAA,QAAA,MACA,EAAA,QAAA,sBAEA,EAAA,EAAA,QAAA,0BACA,EAAA,QAAA,sDACA,EAAA,EAAA,QAAA,UACA,EAAA,QAAA,QACA,EAAA,QAAA,6BACA,EAAA,QAAA,uBACA,EAAA,QAAA,4BAGA,IAAa,EAAb,MACE,YACU,EACA,EACA,EACA,GAHA,KAAA,cAAA,EACA,KAAA,SAAA,EACA,KAAA,mBAAA,EACA,KAAA,OAAA,EAGJ,UARK,OAAA,EAAA,UAAA,OAAA,EAAA,YAUF,aADD,KAAK,SAAS,kBACb,KAAK,SAAS,YAGjB,KAbK,OAAA,EAAA,UAAA,OAAA,EAAA,YAcH,MACA,SADoB,KAAK,kBACE,OAC/B,GAA2B,YAAnB,EAAK,WAET,EAAyB,GAEzB,QAAe,KAAK,UAEpB,EAAS,KAAK,OAAO,cACrB,EAAuB,EAC1B,OAAO,GAAQ,KAAK,mBAAmB,aAAa,EAAK,WACzD,IAAI,GAAK,EAAE,UACV,EAAqB,eACjB,KAAK,mBAAmB,oBAAoB,IAE9C,MAAA,EAAqB,GAAoB,EAAA,UAAA,OAAA,EAAA,YACzC,IAAA,EACA,IACI,MAAA,QAAkB,KAAK,mBAAmB,cAC9C,EAAK,UAEP,QAAe,EAAU,GAAG,GAC5B,MAAO,GACD,MAAA,EAAQ,IAAI,EAAA,SAAS,EAAI,SAQzB,MAPN,EAAM,SAAW,EAAK,SACtB,EAAM,SAAW,EACjB,EAAO,MAAM,CACX,SAAA,EACA,aAAc,EAAM,QACpB,SAAU,EAAK,WAEX,EAEF,MAAA,EAAa,EAChB,KACA,WAAW,KAAK,cAAc,OAAO,0BAClC,SAAE,GAAa,EACf,EAAY,IAAI,KAElB,UACI,EAAW,UAAU,CAAE,SAAA,EAAU,UAAA,IACvC,MAAO,GAMD,MALN,EAAO,MAAM,CACX,SAAA,EACA,aAAc,EAAI,QAClB,SAAU,EAAK,WAEX,IAAI,qCAAqC,EAAI,WAE/C,MAAA,EAAM,CACV,SAAU,EAAK,SACf,UAAA,EACA,OAAA,GAIK,OAFP,EAAO,IAAI,GACX,EAAS,KAAK,SACD,IAEV,IAAA,MAAM,KAAQ,QACX,EAAY,GAIb,aAFD,KAAK,mBAAmB,MAAM,GAC/B,KAAA,YAAY,GACV,IAGH,OAhFK,OAAA,EAAA,UAAA,OAAA,EAAA,YAkFH,MAAA,EAA2B,GAG3B,SAFoB,KAAK,kBAEE,OAC/B,GAA2B,YAAnB,EAAK,WAGT,EAAkB,EAAa,EAAa,OAAS,GACvD,IAAC,EACH,OAEI,MAAA,EAAe,KAAK,mBAAmB,aAC3C,EAAgB,UAEd,IAAA,EACA,GAAA,EAAa,QAAU,EAAiB,CACpC,MAAA,EAAS,KAAK,OAAO,gBACrB,QAAe,KAAK,UAEtB,UACI,KAAK,mBAAmB,oBAAoB,CAChD,EAAgB,YAGhB,IACI,MAAA,QAAkB,KAAK,mBAAmB,cAC9C,EAAgB,UAElB,QAAe,EAAU,KAAK,GAC9B,MAAO,GACD,MAAA,EAAQ,IAAI,EAAA,SAAS,EAAI,SAQzB,MAPN,EAAM,SAAW,EAAgB,SACjC,EAAM,WAAa,EACnB,EAAO,MAAM,CACX,WAAA,EACA,aAAc,EAAI,QAClB,SAAU,EAAgB,WAEtB,EAEF,MAAA,EAAa,EAChB,KACA,WAAW,KAAK,cAAc,OAAO,yBACpC,UACI,EAAW,UAAU,CAAE,SAAU,EAAgB,WACjD,MAAA,EAAkB,CACtB,SAAU,EAAgB,SAC1B,UAAW,IAAI,KACf,OAAA,GAEF,EAAO,IAAI,GACX,EAAW,KAAK,GAChB,MAAO,GAMD,MALN,EAAO,MAAM,CACX,WAAA,EACA,aAAc,EAAI,QAClB,SAAU,EAAgB,WAEtB,IAAI,qCAAqC,EAAI,YAOhD,OAJH,UACI,KAAK,mBAAmB,MAAM,CAAC,EAAgB,YAElD,KAAA,YAAY,GACV,IAGH,mBACJ,EACA,EACA,EAAiD,CAC/C,KAAK,EACL,YAAY,IA3JL,OAAA,EAAA,UAAA,OAAA,EAAA,YA8JL,IAAA,EAAc,EAAU,GAExB,GAAA,EAAO,IACT,EAAc,OACT,IAAK,EACJ,MAAA,IAAI,kCAAkC,SAGxC,MAAA,EAAe,EAAO,YAA2B,eAAb,EAEpC,EAAW,EAAA,eACV,KAAK,cAAc,OAAO,iBAAiB,EAAA,iBAAiB,KAC/D,EAAe,KAAO,QAMnB,aAHD,EAAA,UAAU,EAAA,UAAV,CAAqB,EAAU,EAAa,CAChD,SAAU,UAEL,IAAM,IAGD,cAnLH,OAAA,EAAA,UAAA,OAAA,EAAA,kBAoLH,EAAA,UAAU,EAAA,UAAV,CAAqB,gBAAiB,EAAU,UAAW,CAC/D,SAAU,YAIR,OAzLK,OAAA,EAAA,UAAA,OAAA,EAAA,YA0LH,MAAA,QAAkB,EAAA,UAAU,EAAA,SAAV,CAAoB,eAAgB,CAC1D,SAAU,UAEN,EAAS,EAAA,kBAAkB,eAAgB,CAAE,MAAO,MACrD,EAAU,SAAS,WACtB,EAAO,MAAM,YAEV,EAAU,SAAS,SACtB,EAAO,MAAM,UAEf,EAAO,YACD,KAAK,gBAGP,QAAO,KAAE,EAAF,SAAQ,IAxMV,OAAA,EAAA,UAAA,OAAA,EAAA,YAyMH,MAAA,EACJ,GAAY,KAAK,cAAc,OAAO,gBAClC,QAAiB,KAAK,mBAAmB,EAAgB,GAC/D,QAAQ,eACJ,EAAA,QAAM,KAAK,iBAAiB,EAAA,QAAM,KAAK,eACvC,EAAA,QAAM,KAAK,YAAY,EAAA,QAAM,KAC/B,EAAA,aAAa,QAAQ,UAAU,gBAE7B,EAAA,QAAM,MAAM,KAAK,oCAErB,QAAQ,KAAK,KAGT,iBAtNK,OAAA,EAAA,UAAA,OAAA,EAAA,YAuNH,MAAA,QAAkB,KAAK,mBAAmB,eAE1C,SADe,KAAK,WAEvB,KACA,WACC,KAAK,cAAc,OAAO,yBAExB,QAAkB,EAAW,KAAK,IAAI,UACrC,OAAA,EAAU,IAAK,IACd,MAAA,EAAY,EAAU,KAAK,GAAO,EAAI,WAAa,GACnD,EAAY,EACb,EAAU,UAAkB,SAC7B,UACG,MAAA,CAAE,SAAA,EAAU,UAAA,EAAW,OAAQ,UAIpC,SAxOK,OAAA,EAAA,UAAA,OAAA,EAAA,YAyOH,MAAA,QAAoB,KAAK,iBAExB,OADF,KAAA,YAAY,EAAa,SACvB,CACL,QAAQ,EACR,OAAQ,EAAY,OAAO,GAAqB,YAAhB,EAAE,cAItC,YAAY,EAAsB,GAC5B,GAAS,UAAT,GAAoB,EAAO,OACtB,OAAA,QAAQ,MAAM,EAAQ,CAAC,WAAY,cAE5C,EAAO,QAAQ,CAAC,EAAM,IACpB,QAAQ,cACP,EAAA,QAAM,MAAM,KAAK,OAAO,EAAQ,QACrC,EAAA,QAAM,KAAK,IAAI,OAAO,QAAQ,OAAO,kBACjC,EAAA,QAAM,KAAK,gBAAgB,EAAA,QAAM,MAAM,EAAK,kBAC5C,EAAA,QAAM,KAAK,kBAAkB,EAAA,QAAM,MAAM,OAAO,EAAK,gBACzD,EAAA,QAAM,KAAK,IAAI,OAAO,QAAQ,OAAO,sBA3P1B,EAAgB,EAAA,CAD5B,EAAA,aAG0B,EAAA,oBAAA,CAAa,mBAAb,OAAa,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,OACH,mBADG,OACH,IAAf,EAAA,iBAAA,EAAA,iBAAe,EAAA,OACa,mBADb,OACa,IAAlB,EAAA,oBAAA,EAAA,oBAAkB,EAAA,OACpB,mBADoB,OACpB,IAAV,EAAA,YAAA,EAAA,YAAU,EAAA,UALjB,GAAA,QAAA,iBAAA;;ACNA,aAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IATb,MAAA,EAAA,QAAA,QACA,EAAA,EAAA,QAAA,UACA,EAAA,QAAA,6BACA,EAAA,QAAA,cACA,EAAA,QAAA,kCACA,EAAA,QAAA,4BACA,EAAA,QAAA,sDAGA,IAAa,EAAb,MAEE,YACU,EACA,EACA,EACA,GAHA,KAAA,OAAA,EACA,KAAA,cAAA,EACA,KAAA,SAAA,EACA,KAAA,iBAAA,EALF,KAAA,MAA+B,IAAI,IAQ3C,SAAS,GACF,KAAA,MAAQ,IAAI,IAAI,GAGjB,IAAI,EAAa,GAbZ,OAAA,EAAA,UAAA,OAAA,EAAA,YAeL,SADE,KAAK,eAAe,IACrB,KAAK,MAAM,IAAI,GACZ,MAAA,IAAI,MAAM,yBAEd,IACI,MAAA,QAAY,KAAK,MAAM,IAAI,EAAf,CAAqB,GACnC,GAAO,EAAI,QAAU,EAAI,OAAO,OAClC,QAAQ,mCACY,EAAA,QAAM,IACtB,EAAI,OAAO,kCACe,EAAA,QAAM,IAAI,oBAAoB,EAAA,QAAM,MAChE,wCAIF,QAAQ,uBACA,EAAA,QAAM,MAAM,KAClB,GAAO,EAAI,0BACY,EAAI,qBACvB,mCAKR,WAAW,IAAM,QAAQ,KAAK,GAAI,GAClC,MAAO,GAMH,GALJ,QAAQ,uBACA,EAAA,QAAM,KAAK,iDACnB,EAAA,QAAM,KAAK,UAAY,KAAK,UAAU,YACtC,EAAA,QAAM,KAAK,YAAc,EAAE,oBAEvB,GAAQ,EAAK,SACX,UACI,KAAK,SAAS,EAAE,UACtB,MAAO,GACP,QAAQ,IAAI,+CAAgD,GACvD,KAAA,OAAO,gBAAgB,MAAM,CAChC,aAAc,EAAI,QAClB,SAAU,EAAE,WAIlB,WAAW,IAAM,QAAQ,KAAK,GAAI,MAIxB,SAAS,GA5DZ,OAAA,EAAA,UAAA,OAAA,EAAA,YA6DH,MAAA,EAAuB,CAC3B,SAAA,EACA,UAAW,IAAI,MAEX,EAAS,KAAK,OAAO,iBACrB,cAAE,GAAkB,KAAK,cAAc,OACvC,EAAgB,EAAA,aACjB,QAAQ,SAAS,KAAiB,KAUnC,IAAA,EAcG,OArBP,QAAQ,eACJ,EAAA,QAAM,KAAK,2CAA2C,EAAA,QAAM,IAC9D,yBAEA,EAAA,QAAM,KAAK,iBAAiB,aAK5B,EADE,KAAK,SAAS,aAAa,SACX,KAAK,SAAS,gBAAgB,GAEpC,QAAQ,GAEtB,EAAS,aAAe,EAAU,WAAW,KAAK,iBAAiB,WACnE,EAAS,UAAY,IAAI,KACzB,QAAQ,aACG,EAAA,QAAM,MACb,wEAGJ,EAAO,IAAI,GACJ,IAGT,KAAK,GAKI,OAHP,MAAM,KAAK,KAAK,MAAM,QAAQ,IAAI,GAChC,KAAK,MAAM,IAAI,EAAG,KAAK,MAAM,IAAI,GAAG,KAAK,KAEpC,KAGK,eAAe,GAvGlB,OAAA,EAAA,UAAA,OAAA,EAAA,YAwGH,MACJ,SAAS,aAAE,GADP,cAEJ,EACA,QAAQ,OAAE,GAHN,wBAIJ,GACE,KAAK,cAAc,OACvB,QAAQ,oBACC,EAAA,QAAM,KAAK,gBAAgB,EAAA,QAAM,KAAK,KAAK,iBAC5C,EAAA,QAAM,KAAK,oBAAoB,EAAA,QAAM,KAAK,KAChD,kBAEO,EAAA,QAAM,KAAK,iBAAiB,EAAA,QAAM,KAAK,KAAK,iBAC7C,EAAA,QAAM,KAAK,qBAAqB,EAAA,QAAM,KAAK,KAAK,iBAChD,EAAA,QAAM,KAAK,cAAc,EAAA,QAAM,KAAK,iBAAiB,kBArHpD,EAAa,EAAA,CADzB,EAAA,aAImB,EAAA,oBAAA,CAAU,mBAAV,OAAU,IAAV,EAAA,YAAA,EAAA,YAAU,EAAA,OACU,mBADV,OACU,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,OACA,mBADA,OACA,IAAlB,EAAA,oBAAA,EAAA,oBAAkB,EAAA,OACM,mBADN,OACM,IAAhB,EAAA,kBAAA,EAAA,kBAAgB,EAAA,UANjC,GAAA,QAAA,cAAA;;ACPA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IADA,QAAA,SAAY,CAAA,GAAa,QAAQ,KAAK,WAAW,SAAS,IAC1D,QAAA,cAAgB,EAAC,EAAU,GAAU,EAAM,EAAQ,CAAA,GAAO,MAC/D,GAAA,QAAQ,KAAK,WAAW,SAAS,GAAI,CAC/B,MAAA,EAAwB,QAAQ,KAAK,QAAQ,KAAK,QAAQ,GAAK,GACjE,OAAC,EAGD,EAAsB,SAAS,MACxB,EAEJ,EAAK,GALD,EAOR,OAAA;;ACXX,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHA,MAAA,EAAA,QAAA,QACA,EAAA,QAAA,MAEA,SAAsB,EAAU,GAAhC,OAAA,EAAA,UAAA,OAAA,EAAA,YACM,UACI,EAAA,UAAU,EAAA,MAAV,CAAiB,EAAS,CAAE,WAAW,IAC7C,MAAO,GACH,GAAa,WAAb,EAAI,KACA,MAAA,KALZ,QAAA,UAAA;;ACCA,aAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJA,EAAA,QAAA,sBACA,EAAA,QAAA,WACA,EAAA,QAAA,oBACA,EAAA,QAAA,YACA,EAAA,QAAA;;ACYa,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAhBb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,oDACA,EAAA,QAAA,yBACA,EAAA,QAAA,sBAMA,EAAA,QAAA,0CACA,EAAA,QAAA,6BACA,EAAA,QAAA,oBACA,EAAA,QAAA,oCACA,EAAA,QAAA,aAGA,IAAa,EAAgB,EAA7B,MACgB,eAAQ,EAAiB,EAAA,gBAC9B,MAAA,CACL,OAAQ,EACR,UAAW,CACT,EAAA,cACA,EAAA,WACA,EAAA,cACA,CACE,QAAS,EAAA,OACT,SAAU,GAEZ,CACE,QAAS,EAAA,aACT,SAAU,EAAO,QAEnB,CACE,QAAS,EAAA,aACT,SAAU,EAAO,QAEnB,CACE,QAAS,YACT,KAAM,CAAC,EAAA,cAAe,EAAA,kBACtB,WAAY,CACV,EACA,IACE,EAAA,UAAA,OAAA,EAAA,YACI,MAAA,EAAQ,CACZ,CAAC,KAAM,EAAiB,IACxB,CAAC,OAAQ,EAAiB,MAC1B,CAAC,SAAU,EAAiB,QAC5B,CAAC,SAAU,EAAiB,QAC5B,CAAC,OAAQ,EAAiB,OAIrB,OAFP,EAAO,SAAS,GAChB,EAAO,KAAK,GACL,KAGX,CACE,QAAS,EAAA,gBACT,WAAY,KACJ,MAAK,CAAA,IAAG,GAAQ,QAAQ,KACvB,MAAA,CACL,QAAS,EAAK,GACd,KAAM,KAIZ,CACE,QAAS,QACT,KAAM,CAAC,EAAA,gBAAiB,EAAA,cAAe,EAAA,eACvC,WAAY,EACR,QAAA,EAAS,KAAA,GACX,EACA,IACE,EAAA,UAAA,OAAA,EAAA,YACE,IACE,IAAA,EAAW,QAAQ,MAAR,CAAe,OAAf,CAAuB,cAEpC,EADE,EAAS,cACO,EAAgD,gBAE/C,IAErB,EAAc,IAAI,GAClB,MAAO,IAGL,aAFE,EAAA,UAAU,EAAc,OAAO,OAAO,cACtC,EAAA,UAAU,EAAc,OAAO,eACrB,WAAZ,EACK,EAAO,IAAI,EAAS,CACzB,KAAM,EAAK,GACX,SAAU,EAAA,cAAc,aAAc,QAG1B,OAAZ,EACK,EAAO,IAAI,EAAS,CACzB,SAAU,EAAA,SAAS,gBAGhB,EAAO,IAAI,UA/EjB,EAAgB,EAAA,EAAA,CAD5B,EAAA,UACY,GAAA,QAAA,iBAAA;;ACVA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,uBAKA,IAAa,EAAb,QAAa,EAAS,EAAA,CAHrB,EAAA,OAAO,CACN,QAAS,CAAC,EAAA,iBAAiB,cAEhB,GAAA,QAAA,UAAA;;ACHb,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHA,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,gBAEA,EAAA,UAAU,EAAA,WAAW,UAAU,OAAU,QAAQ,MAAM,KAAK","file":"main.js","sourceRoot":"../src","sourcesContent":["import { InjectionToken } from '@rxdi/core';\nimport { MongoClient } from 'mongodb';\nimport { TemplateTypes } from './templates';\n\nexport interface ReturnType {\n  appliedAt: Date | string;\n  fileName: string;\n  result: any;\n}\n\nexport const LoggerConfig = new InjectionToken('logger-config');\nexport const Config = new InjectionToken('migrations-config');\nexport type MigrationSchema = {\n  down: (db: MongoClient) => unknown;\n  up: (db: MongoClient) => unknown;\n};\n\nexport interface LoggerConfig {\n  folder: string;\n  up: {\n    success: string;\n    error: string;\n  };\n  down: {\n    success: string;\n    error: string;\n  };\n}\n\nexport interface Config {\n  mongodb: {\n    url: string;\n    databaseName: string;\n    options: {\n      useNewUrlParser: boolean;\n    };\n  };\n  outDir: string;\n  migrationsDir?: string;\n  changelogCollectionName?: string;\n  logger?: LoggerConfig;\n  defaultTemplate?: TemplateTypes;\n  typescript?: boolean;\n}\n\nexport type Tasks = 'up' | 'down' | 'status' | 'create' | '--template' | '--rollback';\n\n\nexport const CommandInjector = new InjectionToken('CommandInjector');","import { Inject, Injectable } from '@rxdi/core';\nimport { LoggerConfig } from '../injection.tokens';\n\nimport { createWriteStream, WriteStream } from 'fs';\n\nexport class Logger {\n  successLogger: WriteStream;\n  errorLogger: WriteStream;\n  constructor(successPath: string, errorPath: string) {\n    this.successLogger = createWriteStream(successPath, {\n      flags: 'a'\n    });\n    this.errorLogger = createWriteStream(errorPath, {\n      flags: 'a'\n    });\n  }\n  log(res: unknown) {\n    this.successLogger.write(this.getLogTemplate(res, '🚀'));\n  }\n  error(res: unknown) {\n    this.errorLogger.write(this.getLogTemplate(res, '🔥'));\n  }\n\n  close() {\n    this.successLogger.close();\n    this.errorLogger.close();\n    this.successLogger.end();\n    this.errorLogger.end();\n  }\n\n  getLogTemplate(res: unknown, emoji: string) {\n    return `\n${emoji} ********* ${new Date()} *********\n\\n${JSON.stringify(res, null, 2)}\n`;\n  }\n}\n\n@Injectable()\nexport class LogFactory {\n  loggers: Map<string, Logger> = new Map();\n\n  constructor(@Inject(LoggerConfig) private config: LoggerConfig) {}\n\n  getDownLogger() {\n    return this.create('down', this.getConfig('down'));\n  }\n\n  getUpLogger() {\n    return this.create('up', this.getConfig('up'));\n  }\n\n  getConfig(type: 'up' | 'down') {\n    return {\n      successPath: `${this.config.folder}/${this.config[type].success}`,\n      errorPath: `${this.config.folder}/${this.config[type].error}`\n    };\n  }\n\n  closeConnections() {\n    [...this.loggers.values()].forEach(logger => logger.close());\n  }\n\n  create(name: string, { successPath, errorPath }) {\n    if (this.has(name)) {\n      return this.get(name);\n    }\n    this.loggers.set(name, new Logger(successPath, errorPath));\n    return this.get(name);\n  }\n\n  has(name: string) {\n    return this.loggers.has(name);\n  }\n\n  get(name: string) {\n    return this.loggers.get(name);\n  }\n}\n","import { Config } from './injection.tokens';\n\nexport const DEFAULT_CONFIG: Config = {\n  changelogCollectionName: 'migrations',\n  migrationsDir: 'migrations',\n  defaultTemplate: 'es6',\n  typescript: true,\n  outDir: './dist',\n  logger: {\n    folder: './migrations-log',\n    up: {\n      success: 'up.success.log',\n      error: 'up.error.log'\n    },\n    down: {\n      success: 'down.success.log',\n      error: 'down.error.log'\n    }\n  },\n  mongodb: {\n    url: 'mongodb://localhost:27017',\n    databaseName: 'test',\n    options: {\n      useNewUrlParser: true\n    }\n  }\n};\n","import { Injectable } from '@rxdi/core';\nimport { Config } from '../../injection.tokens';\nimport { DEFAULT_CONFIG } from '../../default.config';\n\n@Injectable()\nexport class ConfigService {\n  config: Config = DEFAULT_CONFIG;\n\n  set(config: Config) {\n    Object.assign(this.config, config);\n  }\n\n  get() {\n    return this.config;\n  }\n}\n","import { Injectable } from '@rxdi/core';\nimport { MongoClient } from 'mongodb';\nimport { connect } from 'mongoose';\nimport { ConfigService } from '../config/config.service';\n\n@Injectable()\nexport class DatabaseService {\n  connections: Map<string, MongoClient> = new Map();\n  constructor(private configService: ConfigService) {}\n  async connect() {\n    const url = this.configService.config.mongodb.url;\n    const databaseName = this.configService.config.mongodb.databaseName;\n    if (!url) {\n      throw new Error('No `url` defined in config file!');\n    }\n\n    if (!databaseName) {\n      throw new Error(\n        'No `databaseName` defined in config file! This is required since migrate-mongo v3. ' +\n          'See https://github.com/seppevs/migrate-mongo#initialize-a-new-project'\n      );\n    }\n    const client = await MongoClient.connect(\n      url,\n      this.configService.config.mongodb.options\n    );\n    const originalDb = client.db.bind(client);\n    client.db = (dbName: string) => originalDb(dbName || databaseName);\n    this.connections.set(url, client);\n    return client;\n  }\n\n  async close() {\n    await Promise.all([...this.connections.values()].map(c => c.close(true)));\n  }\n\n  mongooseConnect() {\n    return connect(\n      `${this.configService.config.mongodb.url}/${\n        this.configService.config.mongodb.databaseName\n      }`,\n      this.configService.config.mongodb.options\n    );\n  }\n}\n","import { format } from 'date-fns';\n\nexport const now = (dateString = Date.now()) => {\n  const date = new Date(dateString);\n  return new Date(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate(),\n    date.getUTCHours(),\n    date.getUTCMinutes(),\n    date.getUTCSeconds(),\n    date.getUTCMilliseconds()\n  );\n};\n\nexport const nowAsString = () => format(now(), 'YYYYMMDDHHmmss');\n","export default `\nexport async function up (client) {\n  await client\n    .db()\n    .collection('albums')\n    .updateOne({ artist: 'The Beatles' }, { $set: { blacklisted: true } })\n  await client\n    .db()\n    .collection('albums')\n    .updateOne({ artist: 'The Doors' }, { $set: { stars: 5 } })\n},\n\nexport async function down (client) {\n  await client\n    .db()\n    .collection('albums')\n    .updateOne({ artist: 'The Doors' }, { $set: { stars: 0 } })\n  await client\n    .db()\n    .collection('albums')\n    .updateOne({ artist: 'The Beatles' }, { $set: { blacklisted: false } })\n}\n`;\n","export default `\nmodule.exports = {\n  async up (client) {\n    return ['Up']\n  },\n\n  async down (client) {\n    return ['Down']\n  }\n}\n`;\n","export default `\nexport async function up(client) {\n  return ['Up'];\n}\nexport async function down(client) {\n  return ['Down'];\n}\n`;\n","export default `\nimport { MongoClient } from 'mongodb';\n\nexport async function up(client: MongoClient) {\n  await client\n    .db()\n    .collection('albums')\n    .updateOne({ artist: 'The Beatles' }, { $set: { blacklisted: true } });\n\n  await client\n    .db()\n    .collection('albums')\n    .updateOne({ artist: 'The Doors' }, { $set: { stars: 5 } });\n}\nexport async function down(client: MongoClient) {\n  await client\n    .db()\n    .collection('albums')\n    .updateOne({ artist: 'The Doors' }, { $set: { stars: 0 } });\n\n  await client\n    .db()\n    .collection('albums')\n    .updateOne({ artist: 'The Beatles' }, { $set: { blacklisted: false } });\n}\n\n`;\n","export default `module.exports = async () => {\n  return {\n    changelogCollectionName: 'migrations',\n    migrationsDir: 'migrations',\n    defaultTemplate: 'es6',\n    outDir: './dist',\n    typescript: true,\n    logger: {\n      folder: './migrations-log',\n      up: {\n        success: 'up.success.log',\n        error: 'up.error.log'\n      },\n      down: {\n        success: 'down.success.log',\n        error: 'down.error.log'\n      }\n    },\n    mongodb: {\n      url: 'mongodb://localhost:27017',\n      databaseName: 'test',\n      options: {\n        useNewUrlParser: true\n      }\n    },\n  };\n};\n`;\n","import native from './native';\nimport es5 from './es5';\nimport es6 from './es6';\nimport typescript from './typescript';\nimport migration from './migration';\n\nexport { es6, es5, native, typescript, migration };\nexport type TemplateTypes = 'es5' | 'es6' | 'native' | 'typescript' | 'migration';\n","import { spawn } from 'child_process';\n\nexport const TranspileTypescript = (paths: string[], outDir: string) => {\n  return new Promise(resolve => {\n    const child = spawn('npx', [\n      'gapi',\n      'build',\n      '--glob',\n      `${paths.toString()}`,\n      '--outDir',\n      outDir\n    ]);\n    // child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    child.on('close', code => {\n      if (code !== 0) {\n        throw new Error();\n      }\n      resolve();\n    });\n  });\n};\n","import { Injectable } from '@rxdi/core';\nimport { MigrationSchema } from '../../injection.tokens';\nimport { readdir, unlink } from 'fs';\nimport { extname, join, isAbsolute } from 'path';\nimport { promisify } from 'util';\nimport { ConfigService } from '../config/config.service';\nimport { TranspileTypescript } from '../../helpers/typescript-builder';\n\n@Injectable()\nexport class MigrationsResolver {\n  constructor(private configService: ConfigService) {}\n\n  async getFileNames() {\n    return (await promisify(readdir)(\n      this.configService.config.migrationsDir\n    )).filter(file => extname(file) === '.js' || this.isTypescript(file));\n  }\n\n  async getDistFileNames() {\n    return (await promisify(readdir)(\n      this.configService.config.outDir || 'dist'\n    ))\n      .filter(file => extname(file) === '.js')\n      .map(f => this.getTsCompiledFilePath(f));\n  }\n\n  isTypescript(file: string) {\n    return extname(file) === '.ts' && this.configService.config.typescript;\n  }\n\n  async loadMigration(\n    fileName: string,\n    cwd?: string\n  ): Promise<MigrationSchema> {\n    let migration: MigrationSchema;\n    if (this.isTypescript(fileName)) {\n      migration = await this.loadTsMigration(fileName);\n    } else {\n      migration = require('esm')(module)(this.getFilePath(fileName));\n    }\n    return migration;\n  }\n\n  getFilePath(fileName: string) {\n    return join(\n      process.cwd(),\n      this.configService.config.migrationsDir,\n      fileName\n    );\n  }\n\n  getRelativePath(fileName: string) {\n    return this.getFilePath(fileName).replace(process.cwd(), '');\n  }\n\n  async clean(migrations: string[] = []) {\n    if (!migrations.length) {\n      migrations = await this.getFileNames();\n    }\n    await Promise.all(\n      migrations.map(fileName => this.deleteArtefacts(fileName))\n    );\n    return true;\n  }\n\n  async deleteArtefacts(fileName: string) {\n    await this.delete(this.getTsCompiledFilePath(fileName));\n    await this.delete(this.getTsCompiledFilePath(`${fileName}.map`));\n  }\n\n  async delete(path: string) {\n    return new Promise(resolve => unlink(path, () => resolve(true)));\n  }\n\n  async loadTsMigration(fileName: string) {\n    return require(this.getTsCompiledFilePath(fileName));\n  }\n\n  async transpileMigrations(migrations: string[]) {\n    await TranspileTypescript(\n      migrations.map(fileName => this.getRelativePath(fileName)),\n      this.configService.config.outDir\n    );\n  }\n\n  getTsCompiledFilePath(fileName: string) {\n    return join(process.cwd(), this.configService.config.outDir, this.replaceFilenameJsWithTs(\n      fileName\n    ));\n  }\n\n  replaceFilenameJsWithTs(fileName: string) {\n    return fileName.replace('ts', 'js');\n  }\n\n  async resolve() {\n    if (isAbsolute(this.configService.config.migrationsDir)) {\n      return this.configService.config.migrationsDir;\n    }\n    return join(process.cwd(), this.configService.config.migrationsDir);\n  }\n}\n","import { ReturnType } from '../injection.tokens';\n\nexport class ErrorMap extends Error implements ReturnType {\n  fileName: string;\n  downgraded: ReturnType[];\n  appliedAt: string | Date;\n  result: unknown;\n  migrated: ReturnType[];\n}\n","import { DatabaseService } from '../database/database.service';\nimport { Injectable } from '@rxdi/core';\nimport { ReturnType } from '../../injection.tokens';\nimport { promisify } from 'util';\nimport { writeFile, createWriteStream, readFile } from 'fs';\nimport { nowAsString } from '../../helpers/date';\nimport { TemplateTypes } from '../../templates/index';\nimport * as templates from '../../templates/index';\nimport { MigrationsResolver } from '../migrations-resolver/migrations-resolver.service';\nimport chalk from 'chalk';\nimport { normalize } from 'path';\nimport { LogFactory } from '../../helpers/log-factory';\nimport { ErrorMap } from '../../helpers/error';\nimport { ConfigService } from '../config/config.service';\n\n@Injectable()\nexport class MigrationService {\n  constructor(\n    private configService: ConfigService,\n    private database: DatabaseService,\n    private migrationsResolver: MigrationsResolver,\n    private logger: LogFactory\n  ) {}\n\n  async connect() {\n    await this.database.mongooseConnect();\n    return this.database.connect();\n  }\n\n  async up() {\n    const statusItems = await this.statusInternal();\n    const pendingItems = statusItems.filter(\n      item => item.appliedAt === 'PENDING'\n    );\n    const migrated: ReturnType[] = [];\n\n    const client = await this.connect();\n\n    const logger = this.logger.getUpLogger();\n    const typescriptMigrations = pendingItems\n      .filter(item => this.migrationsResolver.isTypescript(item.fileName))\n      .map(m => m.fileName);\n    if (typescriptMigrations.length) {\n      await this.migrationsResolver.transpileMigrations(typescriptMigrations);\n    }\n    const migrateItem = async (item: ReturnType) => {\n      let result: unknown;\n      try {\n        const migration = await this.migrationsResolver.loadMigration(\n          item.fileName\n        );\n        result = await migration.up(client);\n      } catch (err) {\n        const error = new ErrorMap(err.message);\n        error.fileName = item.fileName;\n        error.migrated = migrated;\n        logger.error({\n          migrated,\n          errorMessage: error.message,\n          fileName: item.fileName\n        });\n        throw error;\n      }\n      const collection = client\n        .db()\n        .collection(this.configService.config.changelogCollectionName);\n      const { fileName } = item;\n      const appliedAt = new Date();\n\n      try {\n        await collection.insertOne({ fileName, appliedAt });\n      } catch (err) {\n        logger.error({\n          migrated,\n          errorMessage: err.message,\n          fileName: item.fileName\n        });\n        throw new Error(`Could not update changelog: ${err.message}`);\n      }\n      const res = {\n        fileName: item.fileName,\n        appliedAt,\n        result\n      };\n      logger.log(res);\n      migrated.push(res);\n      return await true;\n    };\n    for (const item of pendingItems) {\n      await migrateItem(item);\n    }\n    await this.migrationsResolver.clean(typescriptMigrations);\n    this.printStatus(migrated);\n    return migrated;\n  }\n\n  async down() {\n\n    const downgraded: ReturnType[] = [];\n    const statusItems = await this.statusInternal();\n\n    const appliedItems = statusItems.filter(\n      item => item.appliedAt !== 'PENDING'\n    );\n\n    const lastAppliedItem = appliedItems[appliedItems.length - 1];\n    if (!lastAppliedItem) {\n      return;\n    }\n    const isTypescript = this.migrationsResolver.isTypescript(\n      lastAppliedItem.fileName\n    );\n    let result: unknown;\n    if (appliedItems.length && lastAppliedItem) {\n      const logger = this.logger.getDownLogger();\n      const client = await this.connect();\n\n      if (isTypescript) {\n        await this.migrationsResolver.transpileMigrations([\n          lastAppliedItem.fileName\n        ]);\n      }\n      try {\n        const migration = await this.migrationsResolver.loadMigration(\n          lastAppliedItem.fileName\n        );\n        result = await migration.down(client);\n      } catch (err) {\n        const error = new ErrorMap(err.message);\n        error.fileName = lastAppliedItem.fileName;\n        error.downgraded = downgraded;\n        logger.error({\n          downgraded,\n          errorMessage: err.message,\n          fileName: lastAppliedItem.fileName\n        });\n        throw error;\n      }\n      const collection = client\n        .db()\n        .collection(this.configService.config.changelogCollectionName);\n      try {\n        await collection.deleteOne({ fileName: lastAppliedItem.fileName });\n        const res: ReturnType = {\n          fileName: lastAppliedItem.fileName,\n          appliedAt: new Date(),\n          result\n        };\n        logger.log(res);\n        downgraded.push(res);\n      } catch (err) {\n        logger.error({\n          downgraded,\n          errorMessage: err.message,\n          fileName: lastAppliedItem.fileName\n        });\n        throw new Error(`Could not update changelog: ${err.message}`);\n      }\n    }\n    if (lastAppliedItem) {\n      await this.migrationsResolver.clean([lastAppliedItem.fileName]);\n    }\n    this.printStatus(downgraded);\n    return downgraded;\n  }\n\n  async createWithTemplate(\n    template: TemplateTypes,\n    name: string,\n    config: { raw: boolean; typescript?: boolean } = {\n      raw: false,\n      typescript: false\n    }\n  ) {\n    let rawTemplate = templates[template];\n\n    if (config.raw) {\n      rawTemplate = template;\n    } else if (!rawTemplate) {\n      throw new Error(`🔥  *** Missing template ${template} ***`);\n    }\n\n    const isTypescript = config.typescript || template === 'typescript';\n\n    const filePath = normalize(\n      `./${this.configService.config.migrationsDir}/${nowAsString()}-${name}.${\n        isTypescript ? 'ts' : 'js'\n      }`\n    );\n    await promisify(writeFile)(filePath, rawTemplate, {\n      encoding: 'utf-8'\n    });\n    return '/' + filePath;\n  }\n\n  private async writeConfig() {\n    await promisify(writeFile)('./xmigrate.js', templates.migration, {\n      encoding: 'utf-8'\n    });\n  }\n\n  async init() {\n    const gitIgnore = await promisify(readFile)('./.gitignore', {\n      encoding: 'utf-8'\n    });\n    const stream = createWriteStream('./.gitignore', { flags: 'a' });\n    if (!gitIgnore.includes('.cache')) {\n      stream.write('\\n.cache');\n    }\n    if (!gitIgnore.includes('dist')) {\n      stream.write('\\ndist');\n    }\n    stream.end();\n    await this.writeConfig();\n  }\n\n  async create({ name, template }) {\n    const customTemplate =\n      template || this.configService.config.defaultTemplate;\n    const fileName = await this.createWithTemplate(customTemplate, name);\n    console.log(`\n\\n🚀  ${chalk.bold('Template:')} \"${chalk.blue(customTemplate)}\"!\n\\n💾  ${chalk.bold('File:')} ${chalk.blue(\n      normalize(`${process.cwd()}//${fileName}`)\n    )}\n\\n🚀  ${chalk.green.bold('Migration template created!')}\n`);\n    process.exit(0);\n  }\n\n  async statusInternal() {\n    const fileNames = await this.migrationsResolver.getFileNames();\n    const client = await this.connect();\n    const collection = client\n      .db()\n      .collection<ReturnType>(\n        this.configService.config.changelogCollectionName\n      );\n    const changelog = await collection.find({}).toArray();\n    return fileNames.map((fileName: string) => {\n      const itemInLog = changelog.find(log => log.fileName === fileName);\n      const appliedAt = itemInLog\n        ? (itemInLog.appliedAt as any).toJSON()\n        : 'PENDING';\n      return { fileName, appliedAt, result: null } as ReturnType;\n    });\n  }\n\n  async status() {\n    const statusTable = await this.statusInternal();\n    this.printStatus(statusTable, 'table');\n    return {\n      status: true,\n      result: statusTable.filter(i => i.appliedAt === 'PENDING')\n    };\n  }\n\n  printStatus(status: ReturnType[], type?: 'table') {\n    if (type === 'table' && status.length) {\n      return console.table(status, ['fileName', 'appliedAt']);\n    }\n    status.forEach((item, index) =>\n      console.log(`\n#️⃣  ${chalk.white.bold(String(index + 1))}\n${chalk.blue('-'.repeat(process.stdout.columns))}\n📁  ${chalk.bold(`Filename:`)} ${chalk.green(item.fileName)}\n⏱️  ${chalk.bold(`Applied at:`)} ${chalk.green(String(item.appliedAt))}\n${chalk.blue('-'.repeat(process.stdout.columns))}\n    `)\n    );\n  }\n}\n","import { ReturnType, Tasks, MigrationSchema } from '../../injection.tokens';\nimport { normalize } from 'path';\nimport chalk from 'chalk';\nimport { LogFactory } from '../../helpers/log-factory';\nimport { Injectable } from '@rxdi/core';\nimport { MigrationService } from '../migration/migration.service';\nimport { ConfigService } from '../config/config.service';\nimport { MigrationsResolver } from '../migrations-resolver/migrations-resolver.service';\n\n@Injectable()\nexport class GenericRunner {\n  private tasks: Map<string, Function> = new Map();\n  constructor(\n    private logger: LogFactory,\n    private configService: ConfigService,\n    private resolver: MigrationsResolver,\n    private migrationService: MigrationService\n  ) {}\n\n  setTasks(tasks: any[]) {\n    this.tasks = new Map(tasks);\n  }\n\n  async run(name: Tasks, args?: any) {\n    await this.logEnvironment(name);\n    if (!this.tasks.has(name)) {\n      throw new Error('\\n🔥  Missing command');\n    }\n    try {\n      const res = await this.tasks.get(name)(args);\n      if (res && res.status && res.result.length) {\n        console.log(`\n          \\n🔥  There are ${chalk.red(\n            res.result.length\n          )} migration with status '${chalk.red('PENDING')}' run '${chalk.green(\n          `xmigrate up`\n        )}' command!\n          `);\n      } else {\n        console.log(`\n        \\n🚀  ${chalk.green.bold(\n          res && res.length\n            ? `Success! Runned ${res.length} migrations.`\n            : 'Already up to date'\n        )}\n        `);\n      }\n\n      setTimeout(() => process.exit(0), 0);\n    } catch (e) {\n      console.error(`\n      \\n🔥  ${chalk.bold('Status: Operation executed with error')}\n🧨  ${chalk.bold('Error: ' + JSON.stringify(e))}\n📨  ${chalk.bold('Message: ' + e.message)}\n      `);\n      if (args && args.rollback) {\n        try {\n          await this.rollback(e.fileName);\n        } catch (err) {\n          console.log('\\n🔥  Migration rollback exited with error  ', err);\n          this.logger.getDownLogger().error({\n            errorMessage: err.message,\n            fileName: e.fileName\n          });\n        }\n      }\n      setTimeout(() => process.exit(1), 0);\n    }\n  }\n\n  private async rollback(fileName: string) {\n    const response: ReturnType = {\n      fileName,\n      appliedAt: new Date()\n    } as any;\n    const logger = this.logger.getDownLogger();\n    const { migrationsDir } = this.configService.config;\n    const migrationPath = normalize(\n      `${process.cwd()}/${migrationsDir}/${fileName}`\n    );\n\n    console.log(`\n\\n🙏  ${chalk.bold('Status: Executing rallback operation')} ${chalk.red(\n      'xmigrate down'\n    )}\n📁  ${chalk.bold('Migration:')} ${migrationPath}\n      `);\n\n    let migration: MigrationSchema;\n    if (this.resolver.isTypescript(fileName)) {\n      migration = await this.resolver.loadTsMigration(fileName);\n    } else {\n      migration = require(migrationPath);\n    }\n    response.result = await migration.down(await this.migrationService.connect());\n    response.appliedAt = new Date();\n    console.log(\n      `\\n🚀  ${chalk.green(\n        'Rallback operation success, nothing changed if written correctly!'\n      )}`\n    );\n    logger.log(response);\n    return response;\n  }\n\n  bind(self: MigrationService) {\n    // Binds appropriate `this` to tasks\n    Array.from(this.tasks.keys()).map(k =>\n      this.tasks.set(k, this.tasks.get(k).bind(self))\n    );\n    return this;\n  }\n\n  private async logEnvironment(taskName: string) {\n    const {\n      mongodb: { databaseName },\n      migrationsDir,\n      logger: { folder },\n      changelogCollectionName\n    } = this.configService.config;\n    console.log(`\n    \\n🖥️  ${chalk.bold('Database:')} ${chalk.blue.bold(databaseName)}\n    \\n💿  ${chalk.bold('DBCollection:')} ${chalk.blue.bold(\n      changelogCollectionName\n    )}\n    \\n🗄️  ${chalk.bold('LoggerDir:')} ${chalk.blue.bold(folder)}\n    \\n📁  ${chalk.bold('MigrationsDir:')} ${chalk.blue.bold(migrationsDir)}\n    \\n👷  ${chalk.bold('Script:')} ${chalk.blue.bold(`xmigrate ${taskName}`)}\n    `);\n  }\n}\n","import { Tasks } from '../injection.tokens';\n\nexport const includes = (i: Tasks) => process.argv.toString().includes(i);\nexport const nextOrDefault = (i: Tasks, fb: any = true, type = (p) => (p)) => {\n    if (process.argv.toString().includes(i)) {\n        const isNextArgumentPresent = process.argv[process.argv.indexOf(i) + 1];\n        if (!isNextArgumentPresent) {\n            return fb;\n        }\n        if (isNextArgumentPresent.includes('--')) {\n            return fb;\n        }\n        return type(isNextArgumentPresent);\n    }\n    return fb;\n};","import { promisify } from 'util';\nimport { mkdir } from 'fs';\n\nexport async function ensureDir(dirpath: string) {\n  try {\n    await promisify(mkdir)(dirpath, { recursive: true });\n  } catch (err) {\n    if (err.code !== 'EEXIST') {\n      throw err;\n    }\n  }\n}\n","export * from './args-extractors';\nexport * from './date';\nexport * from './ensure-folder';\nexport * from './error';\nexport * from './log-factory';","import { Module, ModuleWithProviders } from '@rxdi/core';\nimport { GenericRunner } from './services/generic-runner/generic-runner.service';\nimport { LogFactory } from './helpers/log-factory';\nimport {\n  Config,\n  LoggerConfig,\n  CommandInjector,\n  Tasks\n} from './injection.tokens';\nimport { MigrationService } from './services/migration/migration.service';\nimport { nextOrDefault, includes } from './helpers/args-extractors';\nimport { DEFAULT_CONFIG } from './default.config';\nimport { ConfigService } from './services/config/config.service';\nimport { ensureDir } from './helpers';\n\n@Module()\nexport class MigrationsModule {\n  public static forRoot(config: Config = DEFAULT_CONFIG): ModuleWithProviders {\n    return {\n      module: MigrationsModule,\n      providers: [\n        GenericRunner,\n        LogFactory,\n        ConfigService,\n        {\n          provide: Config,\n          useValue: config\n        },\n        {\n          provide: LoggerConfig,\n          useValue: config.logger\n        },\n        {\n          provide: LoggerConfig,\n          useValue: config.logger\n        },\n        {\n          provide: 'set-tasks',\n          deps: [GenericRunner, MigrationService],\n          useFactory: async (\n            runner: GenericRunner,\n            migrationService: MigrationService\n          ) => {\n            const tasks = [\n              ['up', migrationService.up],\n              ['down', migrationService.down],\n              ['status', migrationService.status],\n              ['create', migrationService.create],\n              ['init', migrationService.init]\n            ];\n            runner.setTasks(tasks);\n            runner.bind(migrationService);\n            return tasks;\n          }\n        },\n        {\n          provide: CommandInjector,\n          useFactory: () => {\n            const [, , ...args] = process.argv;\n            return {\n              command: args[0],\n              argv: args\n            };\n          }\n        },\n        {\n          provide: 'start',\n          deps: [CommandInjector, GenericRunner, ConfigService],\n          useFactory: async (\n            { command, argv }: { command: Tasks; argv: any[] },\n            runner: GenericRunner,\n            configService: ConfigService\n          ) => {\n            try {\n              let settings = require('esm')(module)('./xmigrate');\n              if (settings.default) {\n                settings = await (settings as { default: () => Promise<Config> }).default();\n              } else {\n                settings = (await (settings as Function)()) as Config;\n              }\n              configService.set(settings as Config);\n            } catch (e) {}\n            await ensureDir(configService.config.logger.folder);\n            await ensureDir(configService.config.migrationsDir);\n            if (command === 'create') {\n              return runner.run(command, {\n                name: argv[1],\n                template: nextOrDefault('--template', null)\n              });\n            }\n            if (command === 'up') {\n              return runner.run(command, {\n                rollback: includes('--rollback')\n              });\n            }\n            return runner.run(command);\n          }\n        }\n      ]\n    };\n  }\n}\n","import { Module } from '@rxdi/core';\nimport { MigrationsModule } from './migrations.module';\n\n@Module({\n  imports: [MigrationsModule.forRoot()]\n})\nexport class AppModule {}\n","import { Bootstrap } from '@rxdi/core';\nimport { AppModule } from './app.module';\n\nBootstrap(AppModule).subscribe(() => {}, console.error.bind(console));\n"]}